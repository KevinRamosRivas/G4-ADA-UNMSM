/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
 package AlgoritmosDinamicos.Floyd.ImplementacionAB;
import java.awt.Color;
 import java.awt.Container;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;


 import javax.swing.JButton;
 import javax.swing.JFrame;
 import javax.swing.JLabel;
 import javax.swing.JScrollPane;
 import javax.swing.JTextArea;
 import javax.swing.JOptionPane;
 import javax.swing.JTextField;
/**
 *
 * @author Adriana
 */
 public class Vista extends JFrame implements ActionListener {

    /**
     * Creates new form Ventana
     */
    /*Pedimos orden de la matriz*/
    int a = ingreso("Ingrese el número de nodos, por favor");
    
    /*Definiendo elementos*/
    Container contenedor;
  
    JLabel[] etiqueta1;
    JLabel[] etiqueta2;
    JTextField[][] matriz;
    JTextArea mensaje;
    JTextArea mayor;
    JScrollPane scrollpane;
    JScrollPane scrollpanemayor;
    JButton aceptar;
    
    
    
    
    
    public Vista() {
     initComponents();
        
        
     matriz=new JTextField[a][a];/*Luego de definir el argumento a*/
     
     
     etiqueta1=new JLabel[a];
     etiqueta2=new JLabel[a];
     contenedor=getContentPane();
     contenedor.setLayout(null);
     mayor=new JTextArea();
     scrollpanemayor=new JScrollPane(mayor);
     scrollpanemayor.setBounds(0,0,600,474);
     scrollpanemayor.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
     scrollpanemayor.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

      for(int i=0;i<a;i++)
       {
              etiqueta1[i]=new JLabel(""+(i+1));
              etiqueta2[i]=new JLabel(""+(i+1));
              etiqueta1[i].setBounds((int) ((i+2.4)*25),25,25,25);
              etiqueta2[i].setBounds(21,(i+2)*25,25,25);
              mayor.add(etiqueta1[i]);
              mayor.add(etiqueta2[i]);
       }
         for (int i=0;i<matriz.length;i++)
          {
               for(int j=0;j<matriz.length;j++)
                 {
                     matriz[i][j]=new JTextField();
                     matriz[i][j].setBounds((j+2)*25,(i+2)*25,25,25);
                     mayor.add(matriz[i][j]);
                     matriz[i][j].addActionListener( this );
                 }
           }
             int p=matriz[a-1][a-1].getX();
             int w=matriz[a-1][a-1].getY();
             aceptar=new JButton("Aceptar");
             aceptar.setBackground(Color.cyan);
             aceptar.setBounds ( p+80,  40, 100, 30 );
             aceptar.addActionListener( this );
             mensaje=new JTextArea();
             scrollpane=new JScrollPane(mensaje);
             scrollpane.setBounds(p+80,80,300,300);
             String cadena=new String("");
             for(int c=0;c<(p/2.9);c++)
               {
                  cadena+=" ";
               }
             mayor.setText(cadena);
             String cadena1=new String("");
             for(int d=0;d<(w/14);d++)
             {
               cadena1+="\n";
             }
             mayor.setText(cadena+cadena1);
             mensaje.setEditable(false);
             mayor.add(aceptar);
             mayor.add(scrollpane);
             mayor.setEditable(false);
             contenedor.add(scrollpanemayor);
             
             
             setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
             setTitle(" Ingreso de la matriz ");
             setSize(607,507);
             setLocationRelativeTo(null);
             show ();
             matriz[0][0].grabFocus();
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vista().setVisible(true);
            }
        });
    }

 public int ingreso(String men)
 {
        boolean ban=true;
        int a=0;
        int contador=0;
        do
         {
               try
                  {
                   a=Integer.parseInt(JOptionPane.showInputDialog(null,men,"Entrada de  datos",JOptionPane.QUESTION_MESSAGE));
                 ban=true;
                 if(a<=1||a>148)
                     throw new Exception("Tamaño no válido");
                  }
                catch(NumberFormatException e)
                 {
                       contador++;
                       JOptionPane.showMessageDialog(null,"Solo ingrese números enteros por favor :) ","Error",JOptionPane.ERROR_MESSAGE);
                       ban=false;
                 }
                catch(Exception e)
                 {
                      contador++;
                      JOptionPane.showMessageDialog(null,e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                      ban=false;
                 }
                 if(contador==3)
                     System.exit(0);
                 }
                while(ban==false);
                    return a;
 }
    
    
    public void actionPerformed(ActionEvent evento)
  {
    if(evento.getSource()==aceptar)
       {
          long adyacencia[][]=new long[a][a];
 
                try
                  {
                    for (int i=0;i<a;i++)
                         for(int j=0;j<a;j++)
                             {
                               if((matriz[i][j].getText()).equals(""))
                                  throw new Exception("Faltaron valores por ingresar");
                               else
                                  if(matriz[i][j].getText().contains("-"))
                                     {
                                        throw new Exception("Distancias negativas no son válidas\n");
                                     }
                                  else
                                     if(matriz[i][j].getText().equals("i"))
                                          adyacencia[i][j]=999999999;
                                     else
                                        {
                                           if(((matriz[j][j].getText()).contains("i")))
                                                 throw new Exception(" Los bucles deben ser finitos :c\n");
                                          else
 if((matriz[i][j].getText()).contains("1")||(matriz[i][j].getText()).contains("2")||(matriz[i][j].getText()).contains("3")||(matriz[i][j].getText()).contains("4")||(matriz[i][j].getText()).contains("5")||(matriz[i][j].getText()).contains("6")||(matriz[i][j].getText()).contains("7")||(matriz[i][j].getText()).contains("8")||(matriz[i][j].getText()).contains("9")||(matriz[i][j].getText()).contains("i"))
 adyacencia[i][j]=Long.parseLong(matriz[i][j].getText());
                                            else
                                                if(i==j&&((matriz[i][j].getText()).contains("0")))
                                                   adyacencia[i][j]=Long.parseLong(matriz[i][j].getText());
                                                else
                                                  throw new Exception("La i representa Infinito\nCeros solo en la diagonal principal");
                                     }
                                }
                        }
                      catch(Exception e)
                        {
                           for (int k=0;k<a;k++)
                               for(int l=0;l<a;l++)
                                    adyacencia[k][l]=0;
                                    JOptionPane.showMessageDialog(null,e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                                    matriz[0][0].grabFocus();
                        }
                      Implementación x=new Implementación();
                      Long t,t2;
                      t=System.nanoTime();
                      String resultado=x.floyd(adyacencia);
                      t2=System.nanoTime();
                      resultado+="\nTiempo de ejecución:\n"+(t2-t)+"  nanosegundos";
                      mensaje.setText(resultado);
                   }
         }

  
   
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
